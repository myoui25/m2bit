    _   _  _ _____      _____ ___  ___  __      _____ ___ _  __   __
   /_\ | \| / __\ \    / / __| _ \/ __| \ \    / / __| __| |/ /  / /
  / _ \| .` \__ \\ \/\/ /| _||   /\__ \  \ \/\/ /| _|| _|| ' <  / _ \
 /_/ \_\_|\_|___/ \_/\_/ |___|_|_\|___/   \_/\_/ |___|___|_|\_\ \___/

Your name(s):
- Binh Minh Nguyen Xuan
- Nhu Minh Hanh Nguyen

Please submit your textual answers to the following questions in this file:
- P-6.9
  26^4
  
- P-6.11
  Since MandelPanel.draw() uses Thread, it it possible for the draw to take place even when the menu is still working.
  
- P-6.12
  In MandelSet class, when MandelPanel.draw() is replaced by MandelPanel.drawMandel(), it is impossible to use the menu when the
  program is still drawing. This is due to the fact that MandelPanel.drawMandel() is not using Thread.

- P-6.14
  In the given implementation, the ball is only added to the List, but not drawn yet.
  
- P-6.18
  Since there are two Threads running at the same time, the console will print the line for both Threads at the same time,
  however, we don't know the value that we input belong to which Thread.

- P-6.20
  The problem in 6.18 is not completely solved as two Thread still overlap, first the program asks for number 1 of Thread A, 
  then both numbers of Thread B, then the second number of Thread A, finally the sum of Thread A and B are printed, respectively.
  This happens because the sum() is not synchrozied, it will finish Thread B before come back to Thread A. 

- P-6.21
  There is no difference with the previous exercise. The reason is that eventhough the sum() method is synchronized, the two Thread
  still operate on two difference Console, which cause the Java console to print randomly.

- P-6.23
  1. A reentrant lock is a mutual exclusion mechanism that allows threads to reenter into a lock on a resource (multiple times) 
  without a deadlock situation.
  2. A reentrant lock have the same basic behavior and semantics as the implicit monitor lock accessed using synchronized keyword,
  however, it have some extended capability.
  3. + The ability to have more than one condition variable per monitor. Monitors that use the synchronized keyword can only have one. 
  This means reentrant locks support more than one wait()/notify() queue.
     + The ability to make lock "fair" (lock favor granting access for long-wating thread)
     + The ability to check if the lock is being held
     + The ability to get the list of thread waiting on the lock
  4. + Need to add import statement
     + Need to wrap lock in acquisition in a try/finally block
  
- P-6.25
  This implementation fails to meet the spcification in several ways: 
  + a number written by the producer could be read multiple times by the consumer(s)
  + the program does not stop (the last number written by producer(s) are read infinitely)

- P-6.26
  notifyAll() is preferable. When using notifyAll(), it sends a notification to all waiting thread so if one of the thread miss the 
  condition, the other thread still can do there job. Meanwhile, notify() only send notification to one thread so it that thread do not meet
  the condition, the program stops. 

- P-6.28
  The result is not always 0.0 because the program is not Thread safe due to data race.

- P-6.29
  1. The possible results of running this program are 1, 2 and 3 since the methods in this program are not made Thread safe.
  2. The difference between run() and start() is that run() do not creat a thread while start() do.
  The possible result of using run() instead of start() is also 3. This is because when using run(), the program will read from top to bottom, 
  instead of running two parallel thread so the numbers are added normally.
  3. If the try-catch block is removed, the possible result of the program are 0, 1, 2 and 3. This is because the get() method can get the value
  before the thread(s) start, after the first thread or after the second thread.
  4. If the method add() and get() in the original program are declared synchronized, the possible result is only 3 since synchronized make the thread safe
  so there is no data race.